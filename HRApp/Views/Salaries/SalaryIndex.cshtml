@model IEnumerable<HRApp.Models.Salary>
@using HRApp.Models
@{
    ViewData["Title"] = "Salary List";
    var companies = ViewBag.Companies as List<Company>;
}

<div class="container mt-4">
    <h2>Salary List</h2>
    <div class="form-group mb-3">
        <label for="companyDropdown">Filter by Company</label>
        <select id="companyDropdown" class="form-control" onchange="setCompany(this.value)">
            <option value="">All Companies</option>
            @foreach (var company in companies ?? new List<Company>())
            {
                <option value="@company.ComId">@company.ComName</option>
            }
        </select>
    </div>

    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#calculateModal">Calculate Salary</button>

    <!-- AntiForgery Token -->
    @Html.AntiForgeryToken()

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Employee Name</th>
                <th>Salary Month</th>
                <th>Basic</th>
                <th>HRent</th>
                <th>Medical</th>
                <th>Gross</th>
                <th>Absent Days</th>
                <th>Absent Amount</th>
                <th>Payable Amount</th>
                <th>Is Paid</th>
                <th>Paid Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="salaryTable">
            @foreach (var item in Model ?? new List<Salary>())
            {
                <tr id="row-@item.SalaryId" data-salaryid="@item.SalaryId" data-ispaid="@item.IsPaid">
                    <td>@(item.Employee?.EmpName ?? "N/A")</td>
                    <td>@item.SalaryMonth</td> <!-- Use the NotMapped property -->
                    <td>@item.Basic.ToString("F2")</td>
                    <td>@item.HRent.ToString("F2")</td>
                    <td>@item.Medical.ToString("F2")</td>
                    <td>@item.Gross.ToString("F2")</td>
                    <td>@item.AbsentDays</td>
                    <td>@item.AbsentAmount.ToString("F2")</td>
                    <td>@item.PayableAmount.ToString("F2")</td>
                    <td>@item.IsPaid</td>
                    <td>@item.PaidAmount.ToString("F2")</td>
                    <td>
                        <button class="btn btn-warning btn-sm edit-btn">Edit</button>
                        <button class="btn btn-danger btn-sm delete-btn" onclick="deleteSalary('@item.SalaryId')">Delete</button>
                        @if (!item.IsPaid)
                        {
                            <button class="btn btn-success btn-sm pay-btn" onclick="paySalary('@item.SalaryId')">Pay</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Calculate Modal -->
<div class="modal fade" id="calculateModal" tabindex="-1" aria-labelledby="calculateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="calculateModalLabel">Calculate Salary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="calculateForm">
                    @Html.AntiForgeryToken()
                    <div class="form-group mb-3">
                        <label for="comId">Company</label>
                        <select id="comId" name="comId" class="form-control" required>
                            <option value="">Select Company</option>
                            @foreach (var company in companies ?? new List<Company>())
                            {
                                <option value="@company.ComId">@company.ComName</option>
                            }
                        </select>
                        <div id="comId-error" class="text-danger"></div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="dtYear">Year</label>
                        <input type="number" id="dtYear" name="dtYear" class="form-control" value="2025" min="2000" max="2100" required />
                        <div id="dtYear-error" class="text-danger"></div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="dtMonth">Month</label>
                        <select id="dtMonth" name="dtMonth" class="form-control" required>
                            @for (int m = 1; m <= 12; m++)
                            {
                                <option value="@m" selected="@(m == 9 ? "selected" : null)">@m.ToString("D2")</option>
                            }
                        </select>
                        <div id="dtMonth-error" class="text-danger"></div>
                    </div>
                    <button type="submit" class="btn btn-primary">Calculate</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    <script>
        function setCompany(comId) {
            document.cookie = "SelectedComId=" + comId + "; path=/";
            location.reload();
        }

        function deleteSalary(id) {
            if (confirm("Are you sure you want to delete this salary?")) {
                $.ajax({
                    url: '/Salaries/Delete/' + id,
                    type: 'POST',
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        alert(response.message);
                        if (response.success) {
                            $('#row-' + id).remove(); // Remove the row from the table
                        }
                    },
                    error: function () {
                        alert("Failed to delete salary.");
                    }
                });
            }
        }

        function paySalary(id) {
            if (confirm("Are you sure you want to pay this salary?")) {
                $.ajax({
                    url: '/Salaries/Pay/' + id,
                    type: 'POST',
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        alert(response.message);
                        if (response.success) {
                            location.reload(); // Reload to reflect the updated IsPaid status
                        }
                    },
                    error: function () {
                        alert("Failed to pay salary.");
                    }
                });
            }
        }

        $(document).ready(function () {
            var selectedComId = getCookie("SelectedComId");
            if (selectedComId) {
                $("#companyDropdown").val(selectedComId);
            }

            $("#calculateForm").validate({
                rules: {
                    comId: { required: true },
                    dtYear: { required: true, number: true, min: 2000, max: 2100 },
                    dtMonth: { required: true }
                },
                messages: {
                    comId: "Please select a company.",
                    dtYear: "Please enter a valid year between 2000 and 2100.",
                    dtMonth: "Please select a month."
                },
                errorPlacement: function (error, element) {
                    error.appendTo("#" + element.attr("name") + "-error");
                }
            });

            $("#calculateForm").submit(function (e) {
                e.preventDefault();
                if ($(this).valid()) {
                    $.ajax({
                        url: '/Salaries/Calculate',
                        type: 'POST',
                        data: $(this).serialize(),
                        headers: {
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            alert(response.message);
                            if (response.success) {
                                $('#calculateModal').modal('hide');
                                location.reload(); // Reload to refresh the table
                            }
                        },
                        error: function (xhr) {
                            alert("Failed to calculate salary: " + (xhr.responseJSON?.message || "Unknown error"));
                        }
                    });
                }
            });

            $('.edit-btn').click(function () {
                var salaryId = $(this).closest('tr').data('salaryid');
                window.location.href = '/Salaries/SalaryEdit/' + salaryId;
            });

            function getCookie(name) {
                let match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
                return match ? match[2] : null;
            }
        });
    </script>
}