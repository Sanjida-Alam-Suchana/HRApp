@model IEnumerable<HRApp.Models.Attendance>
@using HRApp.Models
@{
    ViewData["Title"] = "Attendance List";
    var companies = ViewBag.Companies as List<Company> ?? new List<Company>();
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-4">
    <h2>Attendance Management</h2>

    <!-- Button to Open Create Modal -->
    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#attendanceModal" onclick="openCreateModal()">+ Add Attendance</button>

    <h3 class="mt-4">Attendance Records</h3>
    <div class="mb-3 d-flex align-items-center">
        <label for="companyDropdown" class="me-3">Filter by Company:</label>
        <select id="companyDropdown" class="form-select w-auto me-3" style="max-width: 300px;">
            <option value="">All Companies</option>
            @foreach (var company in companies)
            {
                <option value="@company.ComId">@company.ComName</option>
            }
        </select>
        <button type="button" id="downloadTemplateBtn" class="btn btn-info mb-2">Download Excel Template</button>
    </div>
    <div class="table-responsive">
        <table class="table table-bordered table-striped" id="attendanceTable">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Employee</th>
                    <th>Status</th>
                    <th>In Time</th>
                    <th>Out Time</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="attendanceTableBody">
                @foreach (var item in Model)
                {
                    <tr id="row-@item.Id" data-comid="@item.ComId">
                        <td>@item.dtDate.ToString("yyyy-MM-dd")</td>
                        <td>@(item.Employee != null ? item.Employee.EmpName : "Not Found")</td>
                        <td>@item.AttStatus</td>
                        <td>@item.InTime.ToString("HH:mm")</td>
                        <td>@item.OutTime.ToString("HH:mm")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="openEditModal('@item.Id')">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteAttendance('@item.Id')">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Attendance Modal -->
<div class="modal fade" id="attendanceModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="attendanceForm">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Add Attendance</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="AttId" name="id" />
                    <div class="mb-3">
                        <label for="ComId" class="form-label">Company</label>
                        <select id="ComId" name="ComId" class="form-control" required>
                            <option value="">-- Select Company --</option>
                            @foreach (var company in companies)
                            {
                                <option value="@company.ComId">@company.ComName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="EmpId" class="form-label">Employee</label>
                        <select id="EmpId" name="EmpId" class="form-control" required>
                            <option value="">-- Select Employee --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dtDate" class="form-label">Date</label>
                        <input type="date" id="dtDate" name="dtDate" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="InTime" class="form-label">In Time</label>
                        <input type="time" id="InTime" name="InTime" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="OutTime" class="form-label">Out Time</label>
                        <input type="time" id="OutTime" name="OutTime" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success" id="saveAttendanceBtn">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Escape HTML to prevent XSS
        function escapeHtml(str) {
            if (typeof str !== 'string') return '';
            return str
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Format time to HH:mm
        function formatTime(timeStr) {
            if (!timeStr) return '';
            const [hours, minutes] = timeStr.split(':');
            return `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
        }

        // Debounce function to prevent rapid submissions
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Open Create Modal
        function openCreateModal() {
            $("#attendanceForm")[0].reset();
            $("#AttId").val('');
            $("#modalTitle").text("Add Attendance");
            $("#ComId").val('').trigger('change');
            $("#EmpId").empty().append('<option value="">-- Select Employee --</option>');
            $("#attendanceModal").modal("show");
        }

        // Open Edit Modal
        function openEditModal(id) {
            console.log("Fetching attendance with ID:", id);
            $.getJSON('/Attendances/GetAttendance?id=' + id, { timeout: 5000 })
                .done(function (res) {
                    if (!res.success) {
                        console.error("Error fetching attendance:", res.message);
                        alert(res.message);
                        return;
                    }
                    const data = res.attendance;
                    console.log("Attendance data:", data);
                    $("#AttId").val(data.id);
                    $("#ComId").val(data.comId).trigger('change');
                    // Wait for employees to load before setting EmpId
                    setTimeout(() => {
                        $("#EmpId").val(data.empId);
                        $("#dtDate").val(data.dtDate);
                        $("#InTime").val(data.inTime);
                        $("#OutTime").val(data.outTime);
                        $("#modalTitle").text("Edit Attendance");
                        $("#attendanceModal").modal("show");
                    }, 500);
                })
                .fail(function (xhr) {
                    console.error("Error fetching attendance:", xhr.responseText);
                    alert("Failed to load attendance data: " + (xhr.responseJSON?.message || "Unknown error"));
                });
        }

        // Save (Create/Update)
        let isSubmitting = false;
        $("#attendanceForm").off('submit').on('submit', debounce(function (e) {
            e.preventDefault();
            if (isSubmitting) {
                console.log("Submission blocked: already in progress");
                return;
            }
            isSubmitting = true;
            try {
                const id = $("#AttId").val();
                const url = id ? '/Attendances/AttendanceEdit/' + id : '/Attendances/AttendanceCreate';
                const data = {
                    id: id,
                    ComId: $("#ComId").val(),
                    EmpId: $("#EmpId").val(),
                    dtDate: $("#dtDate").val(),
                    InTime: formatTime($("#InTime").val()),
                    OutTime: formatTime($("#OutTime").val()),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                };
                console.log("Submitting to URL:", url, "Data:", data);
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: data,
                    timeout: 15000,
                    beforeSend: function () {
                        $("#saveAttendanceBtn").prop("disabled", true).text("Saving...");
                        $("#attendanceForm").find(':input').prop('disabled', true);
                    },
                    success: function (res) {
                        console.log("Save response:", res);
                        $("#saveAttendanceBtn").prop("disabled", false).text("Save");
                        $("#attendanceForm").find(':input').prop('disabled', false);
                        isSubmitting = false;
                        if (res.success) {
                            const att = res.attendance;
                            let row = `
                                <tr id="row-${att.id}" data-comid="${att.comId}">
                                    <td>${att.date}</td>
                                    <td>${escapeHtml(att.empName)}</td>
                                    <td>${att.attStatus}</td>
                                    <td>${att.inTime}</td>
                                    <td>${att.outTime}</td>
                                    <td>
                                        <button class="btn btn-warning btn-sm" onclick="openEditModal('${att.id}')">Edit</button>
                                        <button class="btn btn-danger btn-sm" onclick="deleteAttendance('${att.id}')">Delete</button>
                                    </td>
                                </tr>`;
                            if (id) {
                                $("#row-" + id).replaceWith(row);
                            } else {
                                $("#attendanceTableBody").append(row);
                            }
                            $("#attendanceModal").modal("hide");
                            $("#attendanceForm")[0].reset();
                            alert(res.message);
                        } else {
                            alert(res.message || "Failed to save attendance.");
                        }
                    },
                    error: function (xhr) {
                        console.error("Save error:", xhr.responseText);
                        $("#saveAttendanceBtn").prop("disabled", false).text("Save");
                        $("#attendanceForm").find(':input').prop('disabled', false);
                        isSubmitting = false;
                        alert("Failed to save attendance: " + (xhr.responseJSON?.message || "Unknown error"));
                    }
                });
            } catch (error) {
                console.error("Error in form submit:", error);
                $("#saveAttendanceBtn").prop("disabled", false).text("Save");
                $("#attendanceForm").find(':input').prop('disabled', false);
                isSubmitting = false;
                alert("Error saving attendance. Check console for details.");
            }
        }, 300));

        // Delete Attendance
        function deleteAttendance(id) {
            if (!confirm("Are you sure you want to delete this attendance record?")) return;
            console.log("Deleting attendance with ID:", id);
            $.ajax({
                url: '/Attendances/Delete',
                type: 'POST',
                data: { id: id, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                timeout: 10000,
                success: function (res) {
                    console.log("Delete response:", res);
                    if (res.success) {
                        $("#row-" + id).remove();
                        alert(res.message);
                    } else {
                        alert(res.message || "Failed to delete attendance.");
                    }
                },
                error: function (xhr) {
                    console.error("Delete error:", xhr.responseText);
                    alert("Failed to delete attendance: " + (xhr.responseJSON?.message || "Unknown error"));
                }
            });
        }

        // Company Filter
        $(document).ready(function () {
            $("#companyDropdown").val('').trigger('change');
            $("#companyDropdown").change(function () {
                const comId = $(this).val();
                console.log("Filtering by company:", comId || "All Companies");
                $("#attendanceTableBody").html('<tr><td colspan="6">Loading...</td></tr>');
                const url = comId ? `/Attendances/GetAttendancesByCompany?comId=${comId}` : '/Attendances/GetAllAttendances';
                $.getJSON(url, { timeout: 5000 })
                    .done(function (res) {
                        $("#attendanceTableBody").empty();
                        if (!res.success || res.data.length === 0) {
                            $("#attendanceTableBody").html('<tr><td colspan="6">No attendance records found.</td></tr>');
                            return;
                        }
                        $.each(res.data, function (i, att) {
                            let row = `
                                <tr id="row-${att.id}" data-comid="${att.comId}">
                                    <td>${att.date}</td>
                                    <td>${escapeHtml(att.empName)}</td>
                                    <td>${att.attStatus}</td>
                                    <td>${att.inTime}</td>
                                    <td>${att.outTime}</td>
                                    <td>
                                        <button class="btn btn-warning btn-sm" onclick="openEditModal('${att.id}')">Edit</button>
                                        <button class="btn btn-danger btn-sm" onclick="deleteAttendance('${att.id}')">Delete</button>
                                    </td>
                                </tr>`;
                            $("#attendanceTableBody").append(row);
                        });
                    })
                    .fail(function (xhr) {
                        console.error("Error filtering attendances:", xhr.responseText);
                        $("#attendanceTableBody").html('<tr><td colspan="6">Error loading attendance records.</td></tr>');
                        alert("Failed to filter attendance records: " + (xhr.responseJSON?.message || "Unknown error"));
                    });
            });

            // Load employees based on company selection
            $("#ComId").change(function () {
                const comId = $(this).val();
                console.log("Modal Company selected:", comId);
                $("#EmpId").html('<option value="">-- Select Employee --</option>');
                if (!comId) return;
                $.getJSON('/Attendances/GetEmployeesByCompany?comId=' + comId, { timeout: 5000 })
                    .done(function (data) {
                        if (data && data.length > 0) {
                            $.each(data, function (i, emp) {
                                $("#EmpId").append(`<option value="${emp.empId}">${escapeHtml(emp.empName)}</option>`);
                            });
                        } else {
                            console.warn("No employees found for company:", comId);
                        }
                    })
                    .fail(function (xhr) {
                        console.error("Error loading employees:", xhr.responseText);
                        alert("Failed to load employees: " + (xhr.responseJSON?.message || "Unknown error"));
                    });
            });

            // Download Template
            $("#downloadTemplateBtn").click(function () {
                const comId = $("#companyDropdown").val();
                if (!comId) {
                    alert("Please select a company first.");
                    return;
                }
                console.log("Downloading template for comId:", comId);
                window.location.href = `/Attendances/DownloadAttendanceTemplate?comId=${comId}`;
            });
        });
    </script>
}